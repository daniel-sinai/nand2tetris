// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram,heap, freelist;
    
    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let heap = 2048;
        let freelist = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var Array block, freelist_cur, freelist_prev;
        //find first relevant heap segment
        let freelist_cur = freelist;
        let freelist_prev = freelist;
        while (freelist_cur[1] < (size + 2)) {
            if (freelist_cur[0] = 0) {
                return -1;
            }
            let freelist_prev = freelist_cur;
            let freelist_cur = freelist_cur[0];
        }
        //split the segment to allocated memory and rest
        let block = freelist_cur + 2;
        let block[size] = block[-2];
        let block[size + 1] = block[-1] - size - 2;
        let block[-2] = 0;
        let block [-1] = size;
        //update freelist
        if (freelist_cur = freelist) {
            let freelist = block + size;
        }
        else {
            let freelist_prev[0] = block + size;
        }
        
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var Array freelist_cur;
        let freelist_cur = freelist;
        while (freelist_cur[0] > 0) {
            let freelist_cur = freelist_cur[0];
        }
        let freelist_cur[0] = o - 2;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int max_element, i;
        let max_element = -32767;
        while (i < o[-1]) {
            if (o[i] > max_element) {
                let max_element = o[i];
            }
        }
        return max_element;
    }
}
