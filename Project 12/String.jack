// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int size;
    field int max;
    field Array s;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let s = Array.new(maxLength);
        let size = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size < max) {
            let s[size] = c;
            let size = size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val;
        var int i;
        var boolean negative;

        let val = 0;
        // checking if the number is negative
        if ((size > 0) & (s[0] = 45)) {
            let negative = true;
            let i = 1;
        }
        else {
            let negative = false;
            let i = 0;
        }

        while (i < size) {
            if ((s[i] > 47) & (s[i] < 58)) {
                let val = (val * 10) + (s[i] - 48);
            }
            let i = i + 1;
        }
        if (negative) {
            return -val;
        }
        return val;
    }

    method void helper(int val) {
        var int div;
        var int mod;
        let div = val / 10;
        let mod = val - (div * 10);
        if (val < 10) {
            do appendChar(mod + 48);
        }
        else {
            do helper(div);
            do appendChar(mod + 48);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let size = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do helper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
